col = c(seq(19, 85, by = 6)) #gap = 2
)
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)) #gap = 2
gap = 1)
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)), #gap = 2
gap = 1)
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)), #gap = 2
gap = 2)
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)), #gap = 2
gap = 3)
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)), #gap = 2
gap = 4)
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)), #gap = 2
gap = 5)
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)), #gap = 2
gap = 2)
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
#keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)), #gap = 2
gap = 2)
pres_2022_R1_departements
pres_2017_R1_departements
pres_2022_R1_departements %>% glimpse()
pres_2022_R1_departements %>% mutate(Inscrits = as.numeric(Inscrits))
pres_2022_R1_departements <- pres_2022_R1_departements %>% mutate(Inscrits = as.numeric(Inscrits))
pres_2022_R1_departements_cleaned <- lire(pres_2022_R1_departements,
keep = c(1, 2, 4, 5, 9, 12, 15),
#keep.names = c("Code du département", "Libellé du département", "Inscrits", "Abstentions", "Blancs", "Nuls", "Exprimés"),
col = c(seq(19, 85, by = 6)), gap = 2)
pres_2022_R1_departements_cleaned
pres_2022_R1_departements_cleaned %>%
# put geographical codes in the right format
mutate(CodeDépartement = str_pad(`Code du département`, 2, "left", "0")) %>%
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100)
pres_2022_R1_departements_cleaned %>%
# put geographical codes in the right format
mutate(CodeDépartement = str_pad(`Code du département`, 2, "left", "0")) %>%
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
# specify integers %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `LE PEN`:CHEMINADE), as.integer)) %>%
# reorder
select(CodeDépartement, Département = `Libellé du département`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins, Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot, `LE PEN`:CHEMINADE, `LE PEN_ins`:CHEMINADE_exp) %>%
# nicer, more modern dataframe class
as_tibble()
names(pres_2022_R1_departements)
pres_2022_R1_departements_cleaned %>%
# put geographical codes in the right format
mutate(CodeDépartement = str_pad(`Code du département`, 2, "left", "0")) %>%
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
# specify integers %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer))
pres_2022_R1_departements_cleaned <- pres_2022_R1_departements_cleaned %>%
# put geographical codes in the right format
mutate(CodeDépartement = str_pad(`Code du département`, 2, "left", "0")) %>%
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
# specify integers %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
# reorder
select(CodeDépartement, Département = `Libellé du département`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins, Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`ARTHAUD`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
# nicer, more modern dataframe class
as_tibble()
pres_2022_R1_departements_cleaned <- pres_2022_R1_departements_cleaned %>%
# put geographical codes in the right format
mutate(CodeDépartement = str_pad(`Code du département`, 2, "left", "0")) %>%
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeDépartement, Département = `Libellé du département`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins, Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`ARTHAUD`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
pres_2022_R1_departements_cleaned
write_excel_csv(pres_2022_R1_departements_cleaned, path = "./data/P2022_Resultats_Département_T1.csv")
rio::export(pres_2022_R1_departements_cleaned, file = "./data/P2022_Resultats_Département_T1.xlsx")
pres_2022_R1_circonscriptions <- read_excel("./data-raw/2022/resultats-par-niveau-cirlg-t1-france-entiere.xls",
guess_max = 600, sheet = "Résultats par niveau CirLG T1 F")
pres_2022_R1_circonscriptions <- read_excel("./data-raw/2022/resultats-par-niveau-cirlg-t1-france-entiere.xlsx",
guess_max = 600, sheet = "Résultats par niveau CirLG T1 F")
pres_2022_R1_circonscriptions
pres_2022_R1_circonscriptions_cleaned <- lire(pres_2022_R1_circonscriptions,
keep = c("Code du département", "Libellé du département", "Code de la circonscription", "Libellé de la circonscription",
"Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = c(seq(19, 85, by = 6)), gap = 2)
pres_2022_R1_circonscriptions
pres_2022_R1_circonscriptions <- read_excel("./data-raw/2022/resultats-par-niveau-cirlg-t1-france-entiere.xlsx",
guess_max = 600, sheet = "Résultats par niveau CirLG T1 F") %>%
mutate(Inscrits = as.numeric(Inscrits))
pres_2022_R1_circonscriptions_cleaned <- lire(pres_2022_R1_circonscriptions,
keep = c("Code du département", "Libellé du département", "Code de la circonscription", "Libellé de la circonscription",
"Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = c(seq(19, 85, by = 6)), gap = 2)
c("Code du département", "Libellé du département", "Code de la circonscription", "Libellé de la circonscription",
"Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls")
length(c("Code du département", "Libellé du département", "Code de la circonscription", "Libellé de la circonscription",
"Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"))
pres_2022_R1_circonscriptions
names(pres_2022_R1_circonscriptions)[c(1, 2, 3, 4, 6, 7, 11, 14, 18)]
names(pres_2022_R1_circonscriptions)[c(1, 2, 3, 4, 6, 7, 11, 14, 17)]
pres_2022_R1_circonscriptions_cleaned <- lire(pres_2022_R1_circonscriptions,
keep = c(1, 2, 3, 4, 6, 7, 11, 14, 17),
#keep.names = c("Code du département", "Libellé du département", "Code de la circonscription", "Libellé de la circonscription",
#         "Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = c(seq(19, 85, by = 6)), gap = 2)
View(pres_2022_R1_circonscriptions)
View(pres_2022_R1_departements)
seq(22, 99, 7)
pres_2022_R1_circonscriptions_cleaned <- lire(pres_2022_R1_circonscriptions,
keep = c(1, 2, 3, 4, 6, 7, 11, 14, 17),
#keep.names = c("Code du département", "Libellé du département", "Code de la circonscription", "Libellé de la circonscription",
#         "Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = c(seq(22, 99, 7)), gap = 2)
pres_2022_R1_circonscriptions_cleaned
head(pres_2022_R1_circonscriptions)
View(pres_2022_R1_circonscriptions)
pres_2022_R1_circonscriptions_cleaned %>%
# put geographical codes in the right format
mutate(CodeDépartement = str_pad(`Code du département`, 2, "left", "0")) %>%
mutate(NumeroCirco = str_pad(`Code de la circonscription`, 2, "left", "0")) %>%
mutate(CodeCirco = paste0(CodeDépartement, NumeroCirco)) %>%
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate(Exprimés_vot = Exprimés / Votants * 100) %>%
# specify integers %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer))
pres_2017_R1_circonscriptions_cleaned <- pres_2022_R1_circonscriptions_cleaned %>%
# put geographical codes in the right format
mutate(CodeDépartement = str_pad(`Code du département`, 2, "left", "0")) %>%
mutate(NumeroCirco = str_pad(`Code de la circonscription`, 2, "left", "0")) %>%
mutate(CodeCirco = paste0(CodeDépartement, NumeroCirco)) %>%
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate(Exprimés_vot = Exprimés / Votants * 100) %>%
# specify integers %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
# reorder
select(CodeCirco, Département = `Libellé du département`, NumeroCirco, Circonscription = `Libellé de la circonscription`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins, Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot, `ARTHAUD`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
# nicer, more modern dataframe class
as_tibble()
rm(pres_2017_R1_circonscriptions_cleaned)
pres_2022_R1_circonscriptions_cleaned <- pres_2022_R1_circonscriptions_cleaned %>%
# put geographical codes in the right format
mutate(CodeDépartement = str_pad(`Code du département`, 2, "left", "0")) %>%
mutate(NumeroCirco = str_pad(`Code de la circonscription`, 2, "left", "0")) %>%
mutate(CodeCirco = paste0(CodeDépartement, NumeroCirco)) %>%
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate(Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeCirco, Département = `Libellé du département`, NumeroCirco, Circonscription = `Libellé de la circonscription`,
Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins, Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`ARTHAUD`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
write_excel_csv(pres_2022_R1_circonscriptions_cleaned, path = "./data/P2022_Resultats_Circonscriptions_T1.csv")
rio::export(pres_2022_R1_circonscriptions_cleaned, file = "./data/P2022_Resultats_Circonscriptions_T1.xlsx")
pres_2022_R1_regions <- read_excel("./data-raw/resultats-par-niveau-reg-t1-france-entiere.xls",
guess_max = 25, sheet = "Résultats par niveau Reg T1 Fra")
pres_2022_R1_regions <- read_excel("./data-raw/2022/resultats-par-niveau-reg-t1-france-entiere.xls",
guess_max = 25, sheet = "Résultats par niveau Reg T1 Fra")
pres_2022_R1_regions <- read_excel("./data-raw/2022/resultats-par-niveau-reg-t1-france-entiere.xlsx",
guess_max = 25, sheet = "Résultats par niveau Reg T1 Fra")
pres_2022_R1_regions
pres_2022_R1_regions <- read_excel("./data-raw/2022/resultats-par-niveau-reg-t1-france-entiere.xlsx",
guess_max = 25, sheet = "Résultats par niveau Reg T1 Fra") %>%
mutate(Incrits = as.numeric(Inscrits))
pres_2022_R1_regions
View(pres_2022_R1_regions)
pres_2022_R1_regions[seq(19, 85, 6)]
pres_2022_R1_regions_cleaned <- lire(pres_2022_R1_regions,
keep = c("Code de la région", "Libellé de la région", "Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = seq(19, 85, 6), gap = 2)
pres_2022_R1_regions_cleaned <- lire(pres_2022_R1_regions,
keep.names = c("Code de la région", "Libellé de la région", "Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = seq(19, 85, 6), gap = 2)
pres_2022_R1_regions
pres_2022_R1_regions <- read_excel("./data-raw/2022/resultats-par-niveau-reg-t1-france-entiere.xlsx",
guess_max = 25, sheet = "Résultats par niveau Reg T1 Fra") %>%
mutate(Incrits = as.numeric(Inscrits))
pres_2022_R1_regions <- read_excel("./data-raw/2022/resultats-par-niveau-reg-t1-france-entiere.xlsx",
guess_max = 25, sheet = "Résultats par niveau Reg T1 Fra") %>%
mutate(Inscrits = as.numeric(Inscrits))
pres_2022_R1_regions_cleaned <- lire(pres_2022_R1_regions,
keep = c("Code de la région", "Libellé de la région", "Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = seq(19, 85, 6), gap = 2)
pres_2022_R1_regions_cleaned
pres_2022_R1_regions_cleaned <- pres_2022_R1_regions_cleaned %>%
# put geographical codes in the right format
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeRégion = `Code de la région`, Région = `Libellé de la région`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins,
Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`ARTHAUD`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
View(pres_2022_R1_regions_cleaned)
pres_2022_R1_regions_cleaned <- pres_2022_R1_regions_cleaned %>%
# put geographical codes in the right format
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeRégion = `Code de la région`, Région = `Libellé de la région`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins,
Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`ARTHAUD`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
pres_2022_R1_regions_cleaned <- lire(pres_2022_R1_regions,
keep = c("Code de la région", "Libellé de la région", "Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = seq(19, 85, 6), gap = 2)
pres_2022_R1_regions_cleaned <- pres_2022_R1_regions_cleaned %>%
# put geographical codes in the right format
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeRégion = `Code de la région`, Région = `Libellé de la région`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins,
Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`ARTHAUD`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
write_excel_csv(pres_2022_R1_regions_cleaned, path = "./P2022_Resultats_Région_T1.csv")
write_excel_csv(pres_2022_R1_regions_cleaned, path = "./P2022_Resultats_Régions_T1.csv")
rio::export(pres_2022_R1_regions_cleaned, file = "./data/P2022_Resultats_Régions_T1.xlsx")
write_excel_csv(pres_2022_R1_regions_cleaned, path = "./data/P2022_Resultats_Régions_T1.csv")
pres_2022_R1_communes <- read_excel("./data-raw/2022/resultats-par-niveau-subcom-t1-france-entiere.xls", guess_max = 36000)
pres_2022_R1_communes <- read_excel("./data-raw/2022/resultats-par-niveau-subcom-t1-france-entiere.xlsx", guess_max = 36000)
head(pres_2022_R1_communes)
pres_2022_R1_communes %>% filter(`Libellé de la commune` == "Vaulnaveys-le-Haut")
pres_2022_R1_communes %>% filter(`Etat saisie` != "Complet")
glimpse(pres_2022_R1_communes)
View(pres_2022_R1_communes)
seq(22, 99, 7)
pres_22_R1_communes_cleaned <- lire(pres_2022_R1_communes,
keep = c("Code du département", "Code de la commune", "Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = seq(22, 99, 7),
gap = 2)
pres_2022_R1_communes <- read_excel("./data-raw/2022/resultats-par-niveau-subcom-t1-france-entiere.xlsx", guess_max = 36000) %>% mutate(Inscrits = as.numeric(Inscrits))
pres_22_R1_communes_cleaned <- lire(pres_2022_R1_communes,
keep = c("Code du département", "Code de la commune", "Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = seq(22, 99, 7),
gap = 2)
pres_22_R1_communes_cleaned
pres_2022_R1_communes_cleaned <- pres_22_R1_communes_cleaned %>%
mutate(CodeDepartement = str_pad(string = `Code du département`, width = 2, side = "left", pad = "0")) %>% # has to be in a format like "02"
mutate(CodeCommune = str_pad(string = `Code de la commune`, width = 3, side = "left", pad = "0")) %>%
mutate(CodeInsee = paste0(CodeDepartement, CodeCommune)) %>%  # unique commune ID
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeInsee, CodeDepartement, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins,
Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`LE PEN`:CHEMINADE, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
pres_2022_R1_communes_cleaned <- pres_22_R1_communes_cleaned %>%
mutate(CodeDepartement = str_pad(string = `Code du département`, width = 2, side = "left", pad = "0")) %>% # has to be in a format like "02"
mutate(CodeCommune = str_pad(string = `Code de la commune`, width = 3, side = "left", pad = "0")) %>%
mutate(CodeInsee = paste0(CodeDepartement, CodeCommune)) %>%  # unique commune ID
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeInsee, CodeDepartement, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins,
Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`LE PEN`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
pres_2022_R1_communes_cleaned
readr::write_excel_csv(pres_2022_R1_communes_cleaned, path = "./data/P2022_Resultats_Communes_T1.csv")
rio::export(pres_2022_R1_communes_cleaned, file = "./data/P2022_Resultats_Communes_T1.xlsx")
pres_2022_R1_communes
pres_22_R1_communes_cleaned %>%
mutate(CodeDepartement = str_pad(string = `Code du département`, width = 2, side = "left", pad = "0")) %>% # has to be in a format like "02"
mutate(CodeCommune = str_pad(string = `Code de la commune`, width = 3, side = "left", pad = "0")) %>%
mutate(CodeInsee = paste0(CodeDepartement, CodeCommune)) %>%  # unique commune ID
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100)
pres_22_R1_communes_cleaned <- lire(pres_2022_R1_communes,
keep = c("Code du département", "Code de la commune", "Libellé de la commune",
"Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = seq(22, 99, 7),
gap = 2)
pres_22_R1_communes_cleaned
pres_22_R1_communes_cleaned %>%
mutate(CodeDepartement = str_pad(string = `Code du département`, width = 2, side = "left", pad = "0")) %>% # has to be in a format like "02"
mutate(CodeCommune = str_pad(string = `Code de la commune`, width = 3, side = "left", pad = "0")) %>%
mutate(CodeInsee = paste0(CodeDepartement, CodeCommune)) %>%  # unique commune ID
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer))
pres_2022_R1_communes_cleaned <- pres_22_R1_communes_cleaned %>%
mutate(CodeDepartement = str_pad(string = `Code du département`, width = 2, side = "left", pad = "0")) %>% # has to be in a format like "02"
mutate(CodeCommune = str_pad(string = `Code de la commune`, width = 3, side = "left", pad = "0")) %>%
mutate(CodeInsee = paste0(CodeDepartement, CodeCommune)) %>%  # unique commune ID
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeInsee, CodeDepartement, Commune = `Libellé de la commune`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins,
Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`LE PEN`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
pres_2022_R1_communes_cleaned
readr::write_excel_csv(pres_2022_R1_communes_cleaned, path = "./data/P2022_Resultats_Communes_T1.csv")
rio::export(pres_2022_R1_communes_cleaned, file = "./data/P2022_Resultats_Communes_T1.xlsx")
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx")
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx", skip = 3)
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx", skip = 4)
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx", skip = 4) %>%
as_tibble()
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx", skip = 5) %>%
as_tibble()
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx", skip = 5) %>%
as_tibble()
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx", skip = 5) %>%
as_tibble() %>%
select(CODGEO, LIBGEO, CV)
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx", skip = 5) %>%
as_tibble() %>%
select(CodeInsee = CODGEO, Commune = LIBGEO, CodeCanton = CV)
pres_2022_R1_communes_cleaned
pres_2022_R1_communes <- read_excel("./data-raw/2022/resultats-par-niveau-subcom-t1-france-entiere.xlsx", guess_max = 36000) %>% mutate(Inscrits = as.numeric(Inscrits))
pres_22_R1_communes_cleaned <- lire(pres_2022_R1_communes,
keep = c("Code du département", "Code de la commune", "Libellé de la commune",
"Inscrits", "Abstentions", "Exprimés", "Blancs", "Nuls"),
col = seq(22, 99, 7),
gap = 2)
pres_2022_R1_communes_cleaned <- pres_22_R1_communes_cleaned %>%
mutate(CodeDepartement = str_pad(string = `Code du département`, width = 2, side = "left", pad = "0")) %>% # has to be in a format like "02"
mutate(CodeCommune = str_pad(string = `Code de la commune`, width = 3, side = "left", pad = "0")) %>%
mutate(CodeInsee = paste0(CodeDepartement, CodeCommune)) %>%  # unique commune ID
mutate(Votants = Inscrits - Abstentions) %>%
mutate(Votants_ins = Votants / Inscrits * 100) %>%
mutate(Abstentions_ins = Abstentions / Inscrits * 100) %>%
mutate(Blancs_ins = Blancs/ Inscrits * 100) %>%
mutate(Blancs_vot = Blancs / Votants * 100) %>%
mutate(Nuls_ins = Nuls / Inscrits * 100) %>%
mutate(Nuls_vot = Nuls / Votants * 100) %>%
mutate(Exprimés_ins = Exprimés / Inscrits * 100) %>%
mutate (Exprimés_vot = Exprimés / Votants * 100) %>%
mutate(across(c(Inscrits, Abstentions, Votants, Blancs, Nuls, Exprimés, `ARTHAUD`:`DUPONT-AIGNAN`), as.integer)) %>%
select(CodeInsee, CodeDepartement, Commune = `Libellé de la commune`, Inscrits, Abstentions, Abstentions_ins, Votants, Votants_ins,
Blancs, Blancs_ins, Blancs_vot, Nuls, Nuls_ins, Nuls_vot, Exprimés, Exprimés_ins, Exprimés_vot,
`LE PEN`:`DUPONT-AIGNAN`, `ARTHAUD.ins`:`DUPONT-AIGNAN.exp`) %>%
as_tibble()
pres_2022_R1_communes_cleaned
rio::import("~/Downloads/table-appartenance-geo-communes-22.xlsx", skip = 5) %>%
as_tibble() %>%
select(CodeInsee = CODGEO, Commune = LIBGEO, CodeCanton = CV) -> table_commune_canton
pres_2022_R1_communes_cleaned %>%
left_join(table_commune_canton, by = "CodeInsee")
pres_2022_R1_communes_cleaned %>%
left_join(table_commune_canton, by = "CodeInsee") -> merged
merged %>% filter(is.na(CodeCanton))
merged %>% filter(is.na(CodeCanton)) %>% View()
table_commune_canton
table_commune_canton %>% View()
merged %>% filter(is.na(CodeCanton))
unique(pres_2022_R1_communes_cleaned$CodeDepartement)
merged
merged %>% select(CodeInsee, Commune.x, Commune.y, CodeCanton)
rio::import("~/Downloads/georef-france-canton.csv")
rio::import("~/Downloads/georef-france-canton.csv") -> cantons
cantons <- cantons %>% select(`Code Officiel Canton`, `Nom Officiel Canton`)
head(cantons)
merged
?left_join
merged %>%
left_join(cantons, by = c("CodeCanton" = "Code Officiel Canton"))
merged %>%
left_join(cantons, by = c("CodeCanton" = "Code Officiel Canton")) %>%
select(CodeInsee, Commune.x, Commune.y, CodeCanton, `Nom Officiel Canton`)
merged %>%
left_join(cantons, by = c("CodeCanton" = "Code Officiel Canton")) %>%
select(CodeInsee, Commune.x, Commune.y, CodeCanton, `Nom Officiel Canton`) %>%
filter(is.na(`Nom Officiel Canton`))
merged %>%
left_join(cantons, by = c("CodeCanton" = "Code Officiel Canton")) %>%
select(CodeInsee, Commune.x, Commune.y, CodeCanton, `Nom Officiel Canton`) %>%
filter(!is.na(`Nom Officiel Canton`))
merged %>%
left_join(cantons, by = c("CodeCanton" = "Code Officiel Canton")) %>%
select(CodeInsee, Commune.x, Commune.y, CodeCanton, `Nom Officiel Canton`) %>%
filter(!is.na(`Nom Officiel Canton`))
pres_1011_R1_communes_cleaned
rio::import("./data/P2022_Resultats_Communes_T1.csv") -> communes2022
